generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  oauth_token              String?
  oauth_token_secret       String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model AiTool {
  id            String               @id @default(uuid())
  affLink       String
  companyName   String
  createdAt     DateTime             @default(now())
  description   String               @db.LongText
  logoUrl       String               @db.LongText
  screenshotUrl String               @db.LongText
  name          String
  nameLowercase String
  updatedAt     DateTime             @updatedAt
  videoSource   String?
  websiteLink   String
  KeyTakeaways  KeyTakeaway[]
  PriceInfo     PriceInfo?
  Tags          Tag[]
  FavoritedBy   UserFavoriteAiTool[] @relation("UserFavoriteAiToolToAiTool")
}

model KeyTakeaway {
  id       String  @id @default(uuid())
  takeaway String? @db.LongText
  aiToolId String
  AiTool   AiTool  @relation(fields: [aiToolId], references: [id], onDelete: Cascade)

  @@index([aiToolId])
}

model PriceAmount {
  id          String    @id @default(uuid())
  amount      Int
  priceInfoId String
  PriceInfo   PriceInfo @relation(fields: [priceInfoId], references: [id], onDelete: Cascade)

  @@index([priceInfoId])
}

model PriceInfo {
  id            String        @id @default(uuid())
  linkToPricing String?       @db.LongText
  summary       String?       @db.LongText
  aiToolId      String        @unique
  minPrice      Int
  maxPrice      Int
  averagePrice  Int
  PriceAmounts  PriceAmount[]
  PriceRanges   PriceRange[]
  AiTool        AiTool        @relation(fields: [aiToolId], references: [id], onDelete: Cascade)
}

model PriceRange {
  id          String    @id @default(uuid())
  range       String
  priceInfoId String
  PriceInfo   PriceInfo @relation(fields: [priceInfoId], references: [id], onDelete: Cascade)

  @@index([priceInfoId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Tag {
  id      String   @id @default(uuid())
  tagName String
  AiTools AiTool[]
}

model User {
  id               String               @id @default(cuid())
  name             String?
  email            String?              @unique
  emailVerified    DateTime?
  image            String?
  isAdmin          Boolean              @default(false)
  accounts         Account[]
  sessions         Session[]
  FavoritedAiTools UserFavoriteAiTool[] @relation("UserFavoriteAiToolToUser")
}

model UserFavoriteAiTool {
  id        String   @default(uuid())
  userId    String
  aiToolId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation("UserFavoriteAiToolToUser", fields: [userId], references: [id], onDelete: Cascade)
  AiTool    AiTool   @relation("UserFavoriteAiToolToAiTool", fields: [aiToolId], references: [id], onDelete: Cascade)

  @@unique([userId, aiToolId])
  @@index([userId])
  @@index([aiToolId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model AiToolToTag {
  A String
  B String

  @@unique([A, B], map: "_AiToolToTag_AB_unique")
  @@index([B], map: "_AiToolToTag_B_index")
  @@map("_AiToolToTag")
}
